extends ./header.jade

block title
	title Chatroom

block content
	// TODO: make sure user's input is not too long
	.container(style='height:100%')
		.row
			.col-xs-9(style='padding:0px')
				h2(style='white-space:nowrap;overflow:hidden;text-overflow:ellipsis') #{name}
			.col-xs-3(style='padding:0px')
				button#leaveroom(type='button' class='btn btn-danger' style='margin-top:20px;margin-bottom:10px;margin-left:5px;float:right') Leave room
				form(action='/logout' method='post')
					button(type='submit' class='btn btn-danger' style='margin-top:20px;margin-bottom:10px;margin-left:5px;float:right') Log out
				a(role='button' class='btn btn-danger' style='margin-top:20px;margin-bottom:10px;margin-left:5px;float:right' href='/contactdir')  Go back
		.row
			.col-xs-2(style='padding:0px')
				.dropdown
					button(class='btn btn-primary dropdown-toggle' type='button' id='viewmembers' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false' style='width:100%') View Members 
						span.caret
					ul.dropdown-menu(aria-labelledby='viewmembers' style='width:100%')
						each member in members
							li(style='padding:5px') #{member}
			if isAdmin
				.col-xs-9(style='padding:0px')
					input.form-control(type='text' name='invitesearch' placeholder='Invite another user to this room')
				button.col-xs-1(type='button' class='btn btn-primary' style='height:100%' id='invite') Invite
		.row(class='panel' style='height:70%;border:2px solid black;overflow:auto;margin-top:5px')
			ul.panel-body#messages(class='list-unstyled' style='font-size:20px')
				- var loadPrevDisplay = 'none';
				- var loadNextDisplay = 'none';
				if curPage != 0
					// there are previous pages that can be displayed
					- loadPrevDisplay = 'inline';
				li#loadPrev(style='display:#{loadPrevDisplay}')
					a#loadPrevLink(href='#') Load previous messages
				.pageOne
					- var pastTime = '';
					- var color;
					each msg in curMessages
						if msg.username == user
							- color = 'red';
						else
							- color = 'blue';
						if msg.timestamp == pastTime
							- msg.timestamp = '';
						else
							- pastTime = msg.timestamp;
						li
							span(style='color: #{color}') #{msg.username}: 
							| #{msg.text}
							span(style='float:right') #{msg.timestamp}
				.pageTwo
				li#loadNext(style='display:#{loadNextDisplay}')
					a#loadNextLink(href='#') Load next messages


		.row(style='height:10%')
			.col-xs-11(type='text' class='panel' style='height:100%;border:2px solid black;padding:0px')
				input.form-control(type='text' id='message' style='height:100%;font-size:20px' placeholder='Type a chat message here')
			button.col-xs-1(type='button' class='btn btn-success' id='send' style='height:100%;font-size:20px') Send
	
	link(rel='stylesheet' href='css/jquery-ui.min.css')
	script(src='javascript/jquery-ui.min.js')
	script(src='/socket.io/socket.io.js')
	script.
		var socket = io();
		var curTime = '';
		var MESSAGE_CAPACITY = 50; // maximum number of messages for one page; the browser holds TWO pages
		var numMessages = #{numMessages}; // number of messages we have already loaded
		var needNewPage = false;
		if (numMessages == MESSAGE_CAPACITY) needNewPage = true;
		socket.emit('join chatroom', {
			chatroomId:'#{id}',
			username: '#{user}'
		});

		var options = {
			source: '/autocomplete'
		};
		$('[name=invitesearch]').autocomplete(options);
		function sendInvite() {
			var searchbar = $('[name=invitesearch]');
			$.ajax({
				url: '/inviteuser',
				method: 'GET',
				data: {
					term: searchbar.val(),
					chatroomId: '#{id}'
				},
				dataType: 'text',
				error: function() {
					console.log('Error sending invite');
				},
				success: function(data) {
					searchbar.attr('placeholder', data);
					searchbar.val('');
				}
			});		
		}
		$('#invite').click(function() {
			sendInvite();
		});
		$('[name=invitesearch]').keypress(function() {
			if (event.which == 13) sendInvite();
		});


		var curPage = #{curPage}; // index of most recent page
		var pageOne = #{curPage}; // index of browser's first page
		var pageTwo; // index of browser's second page
		var pageOneBody = $('.pageOne');
		var pageTwoBody = $('.pageTwo');
		var curPageBody = pageOneBody; // at the beginning, the most recent page is loaded to page one
		var loadPrev = $('#loadPrev');
		var loadNext = $('#loadNext');
		function sendMessage() {
			// prevent html injection
			var txt = $('#message').val().replace(/</g, '&lt;').replace(/>/g, '&gt;');
			socket.emit('message', {
				text: txt,
				username: '#{user}',
			});
			$('#message').val('');
			$.ajax({
				url: '/chatroom',
				method: 'POST',
				data: {
					id: '#{id}',
					newPage: needNewPage,
					text: txt,
					user: '#{user}'
				},
				error: function() {
					console.error('Error saving messages');
				}
			});		
		}
		$('#send').click(sendMessage);
		$('#message').keypress(function() {
			if (event.which == 13) sendMessage();
		});
		socket.on('announcement', function(announcement) {
			if (curPageBody == pageTwoBody || curPageBody == pageOneBody) {
				// only display announcements & new messages if most recent page is on the browser screen
				curPageBody.append('<li style="color: grey">' + announcement + '</li>');
			}
		});
		function formatMessage(message) {
			// format the html for a message JSON object from server
			var color;
			if (message.username == '#{user}') {
				color = 'red';
			} else {
				color = 'blue';
			}
			if (message.timestamp == curTime) message.timestamp = '';
			else curTime = message.timestamp;
			return '<li><span style="color: ' + color + '">' + message.username + '</span>: ' + message.text + '<span style="float:right">' + message.timestamp + '</span></li>';
		}
		socket.on('message', function(message) {
			if (needNewPage) {
				needNewPage = false;
				numMessages = 0;
				curPage += 1;
				if (pageTwo == curPage - 1) { // if page two was the most recent page:
					pageOneBody.html(pageTwoBody.html()); // move page two's contents to page one
					pageTwoBody.empty(); // clear/reset page two
					// if loadPrev was unavailable before because we are at the beginning of chat history,
					// display it now
					if (curPage == 2) loadPrev.css('display', 'inline');
				}
				if (!pageTwo || pageTwo == curPage - 1) { 
					// if page one or two, respectively, were the most recent page
					pageTwo = curPage;
					pageOne = pageTwo - 1;
					curPageBody = pageTwoBody;
				}
			}
			if (curPageBody == pageTwoBody || curPageBody == pageOneBody) {
				// only display new messages if most recent page is on browser screen
				curPageBody.append(formatMessage(message));
			}
			numMessages += 1;
			if (numMessages == MESSAGE_CAPACITY) {
				needNewPage = true;
			}
		});

		$('#loadPrevLink').click(function() {
			$.ajax({
				url: '/getpage',
				method: 'GET',
				data: {
					id: '#{id}',
					pageNum: pageOne - 1 // pageOne - 1 is the previous page
				},
				dataType: 'json',
				error: function() {
					console.log('Error accessing messages');
				},
				success: function(data) {
					if (data.error) {
						console.log(data.error);
						return;
					}
					// if the most recent page was on browser screen, loading a past page
					// means we must toggle on loadNext's display because there is now also
					// a future page to load
					if (curPageBody) loadNext.css('display', 'inline');
					// if the most recent page was page two, it has now been replaced, so set
					// curPageBody to null
					if (curPageBody == pageTwoBody) curPageBody = null;
					pageTwo = pageOne;
					pageOne -= 1;
					// if page one is 0 (the first page), there are no more past pages
					if (pageOne == 0) loadPrev.css('display', 'none');
					pageTwoBody.html(pageOneBody.html());
					pageOneBody.empty();
					var messages = data.messages;
					// fill page one with the new page retrieved from the ajax call
					for (var i = 0; i < messages.length; i++) {
						var message = messages[i];
						pageOneBody.append(formatMessage(message));
					}
				}
			});
		});

		// note: if loadNext is visible, the current page must not be on the browser screen
		$('#loadNextLink').click(function() {
			$.ajax({
				url: '/getpage',
				method: 'GET',
				data: {
					id: '#{id}',
					pageNum: pageTwo + 1
				},
				dataType: 'json',
				error: function() {
					console.log('Error accessing messages');
				},
				success: function(data) {
					if (data.error) {
						console.log(data.error);
						return;
					}
					// if page one was the first page, toggle on loadPrev's display because
					// after loading the next page, we have past pages we can load
					if (pageOne == 0) loadPrev.css('display', 'inline');
					pageOne = pageTwo;
					pageTwo += 1;
					if (pageTwo == curPage) { 
						// page two is back on the most recent page, so reset curPageBody from null
						curPageBody = pageTwoBody;
						// since page two is the most recent page, there are no more future pages to load
						loadNext.css('display', 'none');
					}
					pageOneBody.html(pageTwoBody.html());
					pageTwoBody.empty();
					var messages = data.messages;
					for (var i = 0; i < messages.length; i++) {
						var message = messages[i];
						pageTwoBody.append(formatMessage(message));
					}
				}
			});
		});

		$('#leaveroom').click(function() {
			$.ajax({
				url: '/leavechatroom',
				method: 'POST',
				data: {
					user: '#{user}',
					id: '#{id}'
				},
				error: function() {
					console.log('Error leaving chatroom');
				},
				success: function(data) {
					window.location.href = '/contactdir';
				}			
			});
		});

